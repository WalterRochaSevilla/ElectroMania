// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// ----------------------------------------------------
// ENUMS
// ----------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum CartState {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum ProductState {
  AVAILABLE
  UNAVAILABLE
  OUT_OF_STOCK
}

enum UserRole {
  ADMIN
  USER
}

enum UserState {
  ACTIVE
  INACTIVE
}

// ----------------------------------------------------
// MODELOS
// ----------------------------------------------------

// üõí CART
model Cart {
  cart_id     Int          @id @default(autoincrement())
  user_uuid   String       @db.VarChar(100)
  state       CartState    @default(ACTIVE)
  created_at  DateTime     @db.Timestamp(6)

  // Relaciones
  users       User[]       @relation("UserCarts")
  cartDetails CartDetails[]

  @@map("cart")
}

// üßæ CART DETAILS
model CartDetails {
  id          Int      @id @default(autoincrement())
  cart_id     Int
  product_id  Int
  quantity    Int
  unit_price  Decimal  @db.Decimal(10, 2)
  sub_total   Decimal  @db.Decimal(10, 2)

  // Relaciones
  cart    Cart?    @relation(fields: [cart_id], references: [cart_id])
  product Product? @relation(fields: [product_id], references: [product_id])

  @@map("cart_details")
}

// üñºÔ∏è PRODUCT IMAGE
model ProductImage {
  product_id Int
  image      String @db.VarChar(100)

  // Relaciones
  product Product @relation(fields: [product_id], references: [product_id])

  @@id([product_id, image]) // clave primaria compuesta
  @@map("product_images")
}

// üì¶ PRODUCT
model Product {
  product_id    Int             @id @default(autoincrement())
  product_name  String          @unique @db.VarChar(50)
  description   String          @db.VarChar(50)
  price         Decimal         @default(0.00) @db.Decimal(10, 2)
  stock         Int             @default(0)
  state         ProductState    @default(AVAILABLE)

  // Relaciones
  productImages ProductImage[]
  cartDetails   CartDetails[]

  @@map("products")
}

// üë§ USER
model User {
  uuid          String       @id @default(uuid())
  name          String       @db.VarChar(50)
  email         String       @unique @db.VarChar(50)
  password      String       @db.VarChar(60)
  role          UserRole     @default(USER)
  nit_ci        String       @db.VarChar(10)
  social_reason String       @db.VarChar(50)
  is_active     UserState    @default(ACTIVE)

  // Relaciones
  carts Cart[] @relation("UserCarts")

  @@map("users")
}

